---
title: "Dates"
execute: 
  echo: true 
  warning: false
  error: false 
  code-fold: true 
---

#Exercise Part 1: Same Verbs, New Tricks

Part A

```{r}
#Load Data
library(tidyverse)
penguins <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')

# Check it out
head(penguins)
```


```{r}
#Example 1: Single Verb
ggplot(penguins, aes(y = body_mass_g, x = bill_length_mm, color = species)) + 
  geom_point() + 
  facet_wrap(~ sex)
```

```{r}
# Get data on only Adelie penguins that weigh more than 4700g
penguins |> 
  filter(species == "Adelie", body_mass_g > 4700)
```

```{r}
# Get data on penguin body mass only
# Show just the first 6 rows
penguins |> 
  select(body_mass_g) |> 
  head()
```

```{r}
# Sort the penguins from smallest to largest body mass
# Show just the first 6 rows
penguins |> 
  arrange(body_mass_g) |> 
  head()
```

```{r}
# Calculate the average body mass across all penguins
# Note: na.rm = TRUE removes the NAs from the calculation
penguins |> 
  summarize(mean = mean(body_mass_g, na.rm = TRUE))
```

```{r}
# Calculate the average body mass by species
penguins |> 
  group_by(species) |> 
  summarize(mean = mean(body_mass_g, na.rm = TRUE))
```

```{r}
# Create a new column that records body mass in kilograms, not grams
# NOTE: there are 1000 g in 1 kg
# Show just the first 6 rows
penguins |> 
  mutate(body_mass_kg = body_mass_g/1000) |> 
  head()
```

```{r}
#Create Bar Graph
ggplot(penguins, aes(x = species)) + 
  geom_bar()
```

```{r}
#
penguins |> 
  group_by(species) |> 
  summarize(n())
```

```{r}
penguins |> 
  count(species)
```

```{r}
#Example 2: Multiple Verbs

# Sort Gentoo penguins from biggest to smallest with respect to their 
# Bill length in cm (there are 10 mm in a cm)
penguins |> 
  filter(species == "Gentoo") |> 
  mutate(bill_length_cm = bill_length_mm / 10) |> 
  arrange(desc(bill_length_cm))
```

```{r}
# Sort the species from smallest to biggest with respect to their 
# average bill length in cm
penguins |> 
  mutate(bill_length_cm = bill_length_mm / 10) |> 
  group_by(species) |> 
  summarize(mean_bill_length = mean(bill_length_cm, na.rm = TRUE)) |> 
  arrange(desc(mean_bill_length))
```

#Example 3: Interpret Code

#Exercise 1: More Filtering

```{r}
#Part A
# Create a dataset with just Adelie and Chinstrap using %in%
# Pipe this into `count(species)` to confirm that you only have these 2 species
penguins |>
  filter(species %in% c("Adelie", "Chinstrap")) |>
  count(species)
```

```{r}
# Create a dataset with just Adelie and Chinstrap using !=
# Pipe this into `count(species)` to confirm that you only have these 2 species
penguins |>
  filter(species != "Gentoo") |>
  count(species)
```
Part C:
It might get rid of data points even if they have complete information on the variables we need, just because they’re missing info on variables we don’t need.

#Exercise 2: More Selecting

```{r}
# First: recall the variable names
names(penguins)
```

```{r}
# Use a shortcut to keep everything but the year and island variables
penguins |> 
  select(-year, -island)
```

```{r}
# Use a shortcut to keep only species and the penguin characteristics measured in mm
penguins |> 
  select(species, ends_with("mm"))
```

```{r}
# Use a shortcut to keep only species and bill-related measurements
penguins |> 
  select(species, starts_with("bill"))
```

```{r}
# Use a shortcut to keep only species and the length-related characteristics
penguins |> 
  select(species, contains("length"))
```

#Exercise 3: Arranging, counting, & grouping by multiple variables

```{r}
# Change this code to sort the penguins by species, and then island name
# NOTE: The first row should be an Adelie penguin living on Biscoe island
penguins |> 
  arrange(species, island) |> 
  head()
```

```{r}
# Change this code to count the number of male/female penguins observed for each species
penguins |> 
  count(species, sex)
```

```{r}
# Change this code to calculate the average body mass by species and sex
penguins |> 
  group_by(species, sex) |> 
  summarize(mean = mean(body_mass_g, na.rm = TRUE))
```

#Exercise 4: Dates

```{r}
# Get today's date
as.Date(today())
```

```{r}
# Let's store this as "today" so we can work with it below
today <- as.Date(today())

# Check out the class of this object
class(today)
```

```{r}
# Records just the 4-digit year
year(today)
```

```{r}
# Today's month, as a number or label
month(today)
```

```{r}
month(today, label = TRUE)
```

```{r}
# This is the week of the year (1-52)
week(today)
```

```{r}
# Day of the month (1-31) and day of the year (1-366)
mday(today)
```

```{r}
yday(today)  # This is often called the "Julian day"
```

```{r}
# Day of the week as a number or label
wday(today)
```

```{r}
wday(today, label = TRUE)
```

```{r}
# today is on or after Feb 14, 2024
today >= ymd("2024-02-14")
```

```{r}
# today is not before Feb 14, 2024
today < ymd("2024-02-14")
```

